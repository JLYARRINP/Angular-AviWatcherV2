// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.
// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$IBK-AVI-Watcher-primary: mat-palette($mat-indigo);
$IBK-AVI-Watcher-accent: mat-palette($mat-pink, A200, A100, A400);
// The warn palette is optional (defaults to red).
$IBK-AVI-Watcher-warn: mat-palette($mat-red);
// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$IBK-AVI-Watcher-theme: mat-light-theme(( color: ( primary: $IBK-AVI-Watcher-primary, accent: $IBK-AVI-Watcher-accent, warn: $IBK-AVI-Watcher-warn, )));
// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($IBK-AVI-Watcher-theme);
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.
// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$IBK-AVI-Watcher-primary: mat-palette($mat-indigo);
$IBK-AVI-Watcher-accent: mat-palette($mat-pink, A200, A100, A400);
// The warn palette is optional (defaults to red).
$IBK-AVI-Watcher-warn: mat-palette($mat-red);
// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$IBK-AVI-Watcher-theme: mat-light-theme(( color: ( primary: $IBK-AVI-Watcher-primary, accent: $IBK-AVI-Watcher-accent, warn: $IBK-AVI-Watcher-warn, )));
// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($IBK-AVI-Watcher-theme);
// COLOR PARA ESTRUCTURA DE JSON
$type-colors: ( string: #00BB31, number: #0033A1, boolean: #b938a4, date: #05668D, array: #999, object: #999, function: #999, 'null': #fff, undefined: #fff);
.ngx-json-viewer {
    font-family: monospace;
    font-size: 1em;
    width: 100%;
    height: 100%;
    overflow: scroll !important;
    position: relative;
    .segment {
        padding: 2px;
        margin: 1px 1px 1px 12px;
        .segment-main {
            word-wrap: break-word;
            .toggler {
                position: absolute;
                margin-left: -14px;
                margin-top: 3px;
                font-size: .8em;
                line-height: 1.2em;
                vertical-align: middle;
                color: #787878;
                &::after {
                    display: inline-block;
                    content: "â–º";
                    transition: transform 0.1s ease-in;
                }
            }
            .segment-key {
                color: #000000 !important;
                ;
            }
            .segment-separator {
                color: #999;
            }
            .segment-value {
                color: #000;
            }
        }
        .children {
            margin-left: 12px;
        }
    }
    @each $type,
    $color in $type-colors {
        .segment-type-#{$type}>.segment-main>.segment-value {
            color: $color !important;
        }
    }
    // special cases need highlightted
    .segment-type-null>.segment-main>.segment-value {
        color: red !important;
        background-color: transparent !important;
    }
    .segment-type-undefined>.segment-main {
        &>.segment-key {
            color: #999;
        }
        &>.segment-value {
            background-color: #999;
        }
    }
    .segment-type-object>.segment-main,
    .segment-type-array>.segment-main {
        white-space: nowrap;
    }
    .expanded>.toggler::after {
        transform: rotate(90deg);
    }
    .expandable,
    .expandable>.toggler {
        cursor: pointer;
    }
}